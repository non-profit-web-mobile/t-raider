using System.Collections.Generic;
using Model.Domain;
using Model.Kafka.Messages;

namespace Model.Kafka.MessageFactories;

public interface IMessageToSendFactory
{
	public MessageToSend Create(IReadOnlyList<long> telegramIds, NewsAnalyze newsAnalyze);
}

public class MessageToSendFactory : IMessageToSendFactory
{
	public MessageToSend Create(IReadOnlyList<long> telegramIds, NewsAnalyze newsAnalyze)
	{
		if (newsAnalyze.Hypotheses.Count == 0)
		{
			return new MessageToSend(
				new List<long>(),
				"‚ùóÔ∏è –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–¥–µ–π –ø–æ –¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏.",
				new List<Button> { new Button("–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç—å", newsAnalyze.SourceUrl.ToString()) }
			);
		}

		var blocks = newsAnalyze.Hypotheses.Select(FormatHypothesisBlock).ToList();
		var message = FormatFinalMessage(blocks, newsAnalyze);

		var buttons = new List<Button>
		{
			new Button("–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç—å", newsAnalyze.SourceUrl.ToString())
		};

		return new MessageToSend(
			telegramIds,
			message,
			buttons
		);
	}

	private static string FormatHypothesisBlock(Hypothesis hypothesis)
	{
		var actionText = MapActionToText(hypothesis.Action);
		var stopLossTakeProfit = hypothesis.Action != "Hold"
			? $"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {hypothesis.StopLoss}\r\n" +
			  $"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {hypothesis.TakeProfit}\r\n"
			: string.Empty;
		
		return $"{actionText} {hypothesis.Ticker}\r\n" +
		       stopLossTakeProfit +
		       $"‚è≥ –°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏: {hypothesis.Period}\r\n\r\n" +
		       $"üí° –ò–¥–µ—è: {hypothesis.Tactics}\r\n" +
		       $"üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 60%\r\n";
	}

	private static string FormatFinalMessage(List<string> blocks, NewsAnalyze newsAnalyze)
	{
		return string.Join("\r\n", blocks) +
		       $"üì∞ –°–æ–±—ã—Ç–∏–µ: [{newsAnalyze.Brief}]({newsAnalyze.SourceUrl})";
	}

	private static string MapActionToText(string action)
	{
		return action switch
		{
			"Long" => "üü¢ –ü–æ–∫—É–ø–∞–π",
			"Short" => "üî¥ –ü—Ä–æ–¥–∞–≤–∞–π",
			"Hold" => "üü° –î–µ—Ä–∂–∏",
			_ => ""
		};
	}
}