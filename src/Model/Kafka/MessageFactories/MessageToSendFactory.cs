using System.Collections.Generic;
using Model.Domain;
using Model.Kafka.Messages;

namespace Model.Kafka.MessageFactories;

public interface IMessageToSendFactory
{
	public MessageToSend Create(IReadOnlyList<long> telegramIds, NewsAnalyze newsAnalyze);

	public MessageToSend Create(IReadOnlyList<long> telegramIds, IReadOnlyList<NewsAnalyze> news);
}

public class MessageToSendFactory : IMessageToSendFactory
{
	public MessageToSend Create(IReadOnlyList<long> telegramIds, NewsAnalyze newsAnalyze)
	{
		if (newsAnalyze.Hypotheses.Count == 0)
		{
			return new MessageToSend(
				telegramIds,
				"‚ùóÔ∏è –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–¥–µ–π –ø–æ –¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏.",
				new List<Button> { new Button("–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç—å", newsAnalyze.SourceUrl.ToString()) }
			);
		}

		var blocks = newsAnalyze.Hypotheses.Select(FormatHypothesisBlock).ToList();
		var message = FormatFinalMessage(blocks, newsAnalyze);

		var firstHypothesis = newsAnalyze.Hypotheses.First();
		var tbankUrl = $"https://www.tbank.ru/invest/stocks/{firstHypothesis.Ticker}/";
		var buttons = new List<Button>
		{
			new Button("–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç—å", newsAnalyze.SourceUrl.ToString()),
			new Button($"T-–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {firstHypothesis.Ticker}", tbankUrl)
		};

		return new MessageToSend(
			telegramIds,
			message,
			buttons
		);
	}

	public MessageToSend Create(IReadOnlyList<long> telegramIds, IReadOnlyList<NewsAnalyze> news)
	{
		if (news == null || news.Count == 0)
		{
			return new MessageToSend(
				telegramIds,
				"‚ùóÔ∏è –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–¥–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
				new List<Button>()
			);
		}

		var header = "üìä –°–≤–æ–¥–∫–∞ —Å —Ç–æ–ø–æ–≤—ã–º–∏ –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é üëá\n\n";
		var blocks = news.Select(n => FormatNewsBlock(n)).ToList();
		var message = header + string.Join("\n\n___\n\n", blocks);

		var buttons = new List<Button> { };

		return new MessageToSend(
			telegramIds,
			message,
			buttons
		);
	}

	private static string FormatHypothesisBlock(Hypothesis hypothesis)
	{
		return string.Join("\n", new[]
		{
			FormatActionLine(hypothesis),
			FormatPriceLine(hypothesis),
			FormatStopLossLine(hypothesis),
			FormatTakeProfitLine(hypothesis),
			FormatPeriodLine(hypothesis),
			FormatTacticsLine(hypothesis),
			FormatProbabilityLine(hypothesis)
		});
	}

	private static string FormatActionLine(Hypothesis hypothesis)
	{
		return $"**{MapActionToText(hypothesis.Action)} {hypothesis.Ticker}**";
	}

	private static string FormatPriceLine(Hypothesis hypothesis)
	{
		return !string.IsNullOrWhiteSpace(hypothesis.Price.ToString("F0"))
			? $"  üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {hypothesis.Price}‚ÇΩ"
			: string.Empty;
	}

	private static string FormatStopLossLine(Hypothesis hypothesis)
	{
		return !string.IsNullOrWhiteSpace(hypothesis.StopLoss.ToString("F0"))
			? $"  ‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {hypothesis.StopLoss}‚ÇΩ"
			: string.Empty;
	}

	private static string FormatTakeProfitLine(Hypothesis hypothesis)
	{
		return !string.IsNullOrWhiteSpace(hypothesis.TakeProfit.ToString("F0"))
			? $"  üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {hypothesis.TakeProfit}‚ÇΩ"
			: string.Empty;
	}

	private static string FormatPeriodLine(Hypothesis hypothesis)
	{
		return !string.IsNullOrWhiteSpace(hypothesis.Period.ToString("F0"))
			? $"  ‚è≥ –°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏: {hypothesis.Period} —á–∞—Å–æ–≤"
			: string.Empty;
	}

	private static string FormatTacticsLine(Hypothesis hypothesis)
	{
		return $"üí° –ò–¥–µ—è: {hypothesis.Tactics}";
	}

	private static string FormatProbabilityLine(Hypothesis hypothesis)
	{
		return $"üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {(hypothesis.Probability * 100):F0}%";
	}

	private static string FormatEventLine(NewsAnalyze newsAnalyze)
	{
		return $"–°–æ–±—ã—Ç–∏–µ: {newsAnalyze.Brief}";
	}

	private static string FormatFinalMessage(List<string> blocks, NewsAnalyze newsAnalyze)
	{
		return string.Join("___", blocks) + FormatEventLine(newsAnalyze);
	}

	private static string MapActionToText(string action)
	{
		return action switch
		{
			"Long" => "üü¢ –ü–æ–∫—É–ø–∞–π",
			"Short" => "üî¥ –ü—Ä–æ–¥–∞–≤–∞–π",
			"Hold" => "üü° –î–µ—Ä–∂–∏",
			_ => ""
		};
	}

	private static string FormatNewsBlock(NewsAnalyze news)
	{
		var header = $"üì∞ {news.Brief}\n";
		var hypothesesBlocks = news.Hypotheses.Select(FormatHypothesisBlock);
		var hypothesesText = string.Join("\n\n", hypothesesBlocks);
		return header + hypothesesText;
	}
}